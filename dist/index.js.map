{"version":3,"sources":["../src/index.ts","../src/core/FetcherRegistry.ts","../src/core/BaseFetcher.ts","../src/hocs/withClientFetching.tsx","../src/hocs/withServerFetching.tsx","../src/components/ListRenderers.tsx","../src/components/Toggle.tsx"],"sourcesContent":["// Export all public APIs\nexport * from \"./core/BaseFetcher\"\nexport * from \"./core/FetcherRegistry\"\nexport * from \"./hocs/withClientFetching\"\nexport * from \"./hocs/withServerFetching\"\nexport * from \"./components/ListRenderers\"\nexport * from \"./components/Toggle\"\n\n","import type { BaseFetcher, DataSourceType } from \"./BaseFetcher\"\n\nexport class FetcherRegistry {\n  private static instance: FetcherRegistry\n  private fetchers: Map<string, BaseFetcher<any>>\n  private apiBasePath = \"/api/data\"\n  private baseUrl: string = \n    typeof process !== \"undefined\" && process.env.NEXT_PUBLIC_API_BASE_URL \n      ? process.env.NEXT_PUBLIC_API_BASE_URL \n      : typeof window !== \"undefined\" \n        ? window.location.origin \n        : \"http://localhost:3000\"\n\n  private constructor() {\n    this.fetchers = new Map()\n  }\n\n  public static getInstance(): FetcherRegistry {\n    if (!FetcherRegistry.instance) {\n      FetcherRegistry.instance = new FetcherRegistry()\n    }\n    return FetcherRegistry.instance\n  }\n\n  public register(componentId: string, fetcher: BaseFetcher<any>): void {\n    this.fetchers.set(componentId, fetcher)\n  }\n\n  public getFetcher(componentId: string): BaseFetcher<any> | undefined {\n    return this.fetchers.get(componentId)\n  }\n\n  public setApiBasePath(path: string): void {\n    this.apiBasePath = path\n  }\n\n  public getApiBasePath(): string {\n    return this.apiBasePath\n  }\n\n  public setBaseUrl(url: string): void {\n    // Ensure the URL doesn't end with a slash\n    this.baseUrl = url.endsWith('/') ? url.slice(0, -1) : url\n  }\n\n  public getBaseUrl(): string {\n    return this.baseUrl\n  }\n\n  // Method to handle URL construction\n  public getDataUrl(componentId: string, dataSource: DataSourceType = \"json\", isServer: boolean = false): string {\n    // For server-side fetching, use the full URL\n    if (isServer) {\n      return `${this.baseUrl}${this.apiBasePath}?component=${componentId}&dataSource=${dataSource}`\n    }\n    \n    // For client-side, relative URL is fine\n    return `${this.apiBasePath}?component=${componentId}&dataSource=${dataSource}`\n  }\n}","import { FetcherRegistry } from \"./FetcherRegistry\"\n\nexport type DataSourceType = \"json\" | \"csv\" | \"txt\" | \"api\"\n\nexport interface FetcherOptions {\n  dataSource?: DataSourceType\n  componentId: string\n  endpoint?: string\n}\n\nexport abstract class BaseFetcher<T> {\n  protected options: FetcherOptions\n\n  constructor(options: FetcherOptions) {\n    this.options = options\n  }\n\n  abstract parseData(data: any): T[]\n\n  private getUrl(isServer: boolean, componentId: string): string {\n    const registry = FetcherRegistry.getInstance()\n    \n    // If using a specific endpoint (like external API)\n    if (this.options.endpoint && this.options.dataSource === \"api\") {\n      return this.options.endpoint\n    }\n    \n    // Get the base URL from registry\n    const baseUrl = registry.getBaseUrl()\n    const apiPath = registry.getApiBasePath()\n    \n    // For server-side requests, always use the absolute URL with the configured base URL\n    if (isServer) {\n      return `${baseUrl}${apiPath}?component=${componentId}&dataSource=${this.options.dataSource}`\n    }\n    \n    // For client-side, we can use a relative URL which will use current origin\n    return `${apiPath}?component=${componentId}&dataSource=${this.options.dataSource}`\n  }\n\n  async fetchJsonData(isServer: boolean, componentId: string): Promise<T[]> {\n    const url = this.getUrl(isServer, componentId)\n    \n    try {\n      console.log(`Fetching JSON data from: ${url}`)\n      const response = await fetch(url, {\n        cache: \"no-store\",\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch data: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      return this.parseData(data)\n    } catch (error) {\n      console.error(`Error fetching JSON data from ${url}:`, error)\n      throw error\n    }\n  }\n\n  async fetchCsvData(isServer: boolean, componentId: string): Promise<T[]> {\n    const url = this.getUrl(isServer, componentId)\n    \n    try {\n      console.log(`Fetching CSV data from: ${url}`)\n      const response = await fetch(url, {\n        cache: \"no-store\",\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch CSV data: ${response.statusText}`)\n      }\n\n      const text = await response.text()\n      const rows = text.split(\"\\n\")\n      const headers = rows[0].split(\",\")\n\n      const jsonData = rows\n        .slice(1)\n        .filter((row) => row.trim() !== \"\")\n        .map((row) => {\n          const values = row.split(\",\")\n          return headers.reduce((obj, header, index) => {\n            obj[header.trim()] = values[index]?.trim()\n            return obj\n          }, {} as any)\n        })\n\n      return this.parseData(jsonData)\n    } catch (error) {\n      console.error(`Error fetching CSV data from ${url}:`, error)\n      throw error\n    }\n  }\n\n  async fetchTxtData(isServer: boolean, componentId: string): Promise<T[]> {\n    const url = this.getUrl(isServer, componentId)\n    \n    try {\n      console.log(`Fetching TXT data from: ${url}`)\n      const response = await fetch(url, {\n        cache: \"no-store\",\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch TXT data: ${response.statusText}`)\n      }\n\n      const text = await response.text()\n      const lines = text.split(\"\\n\")\n\n      // Simple format: assume each line is a JSON object\n      const jsonData = lines\n        .filter((line) => line.trim() !== \"\")\n        .map((line) => {\n          try {\n            return JSON.parse(line)\n          } catch (e) {\n            // Simple key-value format\n            const pairs = line.split(\",\")\n            return pairs.reduce((obj, pair) => {\n              const [key, value] = pair.split(\":\").map((s) => s.trim())\n              if (key && value) {\n                obj[key] = value\n              }\n              return obj\n            }, {} as any)\n          }\n        })\n\n      return this.parseData(jsonData)\n    } catch (error) {\n      console.error(`Error fetching TXT data from ${url}:`, error)\n      throw error\n    }\n  }\n\n  async fetchApiData(isServer: boolean, componentId: string): Promise<T[]> {\n    // For external API calls (like RapidAPI or MockAPI)\n    const url = this.options.endpoint || \"\"\n\n    if (!url || url === \"\") {\n      console.warn(`No endpoint provided for API data source in component ${componentId}`)\n      return []\n    }\n\n    try {\n      console.log(`Fetching API data from: ${url}`)\n      let headers: Record<string, string> = {}\n\n      // Only add API keys if they're defined\n      if (process.env.NEXT_PUBLIC_RAPIDAPI_KEY && process.env.NEXT_PUBLIC_RAPIDAPI_HOST) {\n        headers = {\n          \"x-rapidapi-key\": process.env.NEXT_PUBLIC_RAPIDAPI_KEY,\n          \"x-rapidapi-host\": process.env.NEXT_PUBLIC_RAPIDAPI_HOST,\n        }\n      }\n\n      const response = await fetch(url, {\n        headers,\n        cache: \"no-store\",\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch API data: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      return this.parseData(data)\n    } catch (error) {\n      console.error(`Error fetching API data from ${url}:`, error)\n      // Return empty array instead of throwing to prevent component crashes\n      return []\n    }\n  }\n\n  async fetchData(isServer = false, componentId = this.options.componentId): Promise<T[]> {\n    const dataSource = this.options.dataSource || \"json\"\n\n    switch (dataSource) {\n      case \"json\":\n        return this.fetchJsonData(isServer, componentId)\n      case \"csv\":\n        return this.fetchCsvData(isServer, componentId)\n      case \"txt\":\n        return this.fetchTxtData(isServer, componentId)\n      case \"api\":\n        return this.fetchApiData(isServer, componentId)\n      default:\n        throw new Error(`Unsupported data source: ${dataSource}`)\n    }\n  }\n}","\"use client\"\n\nimport React from \"react\"\nimport { FetcherRegistry } from \"../core/FetcherRegistry\"\n\nexport function withClientFetching<T, P extends { data?: T[] }>(\n  WrappedComponent: React.ComponentType<P>,\n  componentId: string,\n) {\n  return function WithClientFetching(props: Omit<P, \"data\">) {\n    const [data, setData] = React.useState<T[]>([])\n    const [loading, setLoading] = React.useState<boolean>(true)\n    const [error, setError] = React.useState<string | null>(null)\n\n    React.useEffect(() => {\n      const fetchData = async () => {\n        setLoading(true)\n        setError(null)\n\n        try {\n          const registry = FetcherRegistry.getInstance()\n          const fetcher = registry.getFetcher(componentId)\n\n          if (!fetcher) {\n            throw new Error(`No fetcher registered for component: ${componentId}`)\n          }\n\n          // Explicitly pass isServer=false for client-side fetching\n          const result = await fetcher.fetchData(false, componentId)\n          setData(result)\n        } catch (err: any) {\n          console.error(\"Client fetching error:\", err)\n          setError(err.message || \"Failed to fetch\")\n        } finally {\n          setLoading(false)\n        }\n      }\n\n      fetchData()\n    }, [componentId])\n\n    if (loading) return <div>Loading data...</div>\n    if (error) return <div>Error: {error}</div>\n\n    return <WrappedComponent {...(props as P)} data={data} />\n  }\n}","import React from \"react\"\nimport { FetcherRegistry } from \"../core/FetcherRegistry\"\n\nexport function withServerFetching<T, P extends { data?: T[] }>(\n  WrappedComponent: React.ComponentType<P>,\n  componentId: string,\n) {\n  return function WithServerFetching(props: Omit<P, \"data\">) {\n    const [data, setData] = React.useState<T[]>([])\n    const [loading, setLoading] = React.useState<boolean>(true)\n    const [error, setError] = React.useState<string | null>(null)\n\n    React.useEffect(() => {\n      const fetchData = async () => {\n        setLoading(true)\n        setError(null)\n\n        try {\n          // Get the registry instance\n          const registry = FetcherRegistry.getInstance()\n          \n          // Get API base URL from environment (or server URL for absolute path construction)\n          const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL\n          \n          // Set base path directly if available\n          if (apiBaseUrl) {\n            registry.setApiBasePath('/api/data')\n            registry.setBaseUrl(apiBaseUrl)\n          }\n          \n          const fetcher = registry.getFetcher(componentId)\n\n          if (!fetcher) {\n            throw new Error(`No fetcher registered for component: ${componentId}`)\n          }\n\n          // Explicitly pass server flag to true and the component ID\n          const result = await fetcher.fetchData(true, componentId)\n          setData(result)\n        } catch (err: any) {\n          console.error(\"Server fetching error:\", err)\n          setError(err.message || \"Failed to fetch\")\n        } finally {\n          setLoading(false)\n        }\n      }\n\n      fetchData()\n    }, [componentId])\n\n    if (loading) return <div>Loading data...</div>\n    if (error) return <div>Error: {error}</div>\n\n    return <WrappedComponent {...(props as P)} data={data} />\n  }\n}","import type React from \"react\"\n\ninterface ListRendererProps<T> {\n  data: T[]\n  renderItem: (item: T, index: number) => React.ReactNode\n  title: string\n  className?: string\n  listClassName?: string\n  itemClassName?: string\n}\n\nexport function ListRenderer<T>({\n  data,\n  renderItem,\n  title,\n  className = \"list-container\",\n  listClassName = \"list\",\n  itemClassName = \"list-item\",\n}: ListRendererProps<T>) {\n  return (\n    <div className={className}>\n      <h2>{title}</h2>\n      {data.length === 0 ? (\n        <p>No data available</p>\n      ) : (\n        <ul className={listClassName}>\n          {data.map((item, index) => (\n            <li key={index} className={itemClassName}>\n              {renderItem(item, index)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  )\n}\n\n","// components/Toggle.tsx\n'use client';\n\nimport React from 'react';\nimport { DataSourceType } from '../core/BaseFetcher';\n\ninterface ToggleProps {\n  onToggleMode: (isServer: boolean) => void;\n  onChangeDataSource: (dataSource: DataSourceType) => void;\n  isServer: boolean;\n  dataSource: DataSourceType;\n}\n\nexport function Toggle({ onToggleMode, onChangeDataSource, isServer, dataSource }: ToggleProps) {\n  return (\n    <div className=\"toggle-container\">\n      <div className=\"mode-toggle\">\n        <h3>Fetch Mode:</h3>\n        <div className=\"toggle-buttons\">\n          <button \n            className={isServer ? 'active' : ''} \n            onClick={() => onToggleMode(true)}\n          >\n            Server-side\n          </button>\n          <button \n            className={!isServer ? 'active' : ''} \n            onClick={() => onToggleMode(false)}\n          >\n            Client-side\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"data-source-toggle\">\n        <h3>Data Source:</h3>\n        <select \n          value={dataSource} \n          onChange={(e) => onChangeDataSource(e.target.value as DataSourceType)}\n        >\n          <option value=\"json\">JSON</option>\n          <option value=\"csv\">CSV</option>\n          <option value=\"txt\">TXT</option>\n          <option value=\"api\">API</option>\n        </select>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","names":["React","import_react","import_jsx_runtime","React","import_jsx_runtime","import_jsx_runtime"]}